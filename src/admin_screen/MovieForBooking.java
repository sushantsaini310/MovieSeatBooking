/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin_screen;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.dao.DataConnection;
import model.dao.MovieInfoDao;
import model.dao.MovieTimingDao;
import model.dao.ScreenInfoDao;
import model.dao.ScreenTicketsDao;
import model.to.MovieInfoTo;
import model.to.MovieTimingTo;
import model.to.ScreenInfoTo;
import model.to.ScreenTicketsTo;
import utility.ErrorHandler;
import utility.Operation;
import java.sql.*;
import java.util.Calendar;
import java.util.Iterator;
import model.dao.CommonDAO;
import model.dao.SaleDetailsDao;
import model.dao.TicketSaleDao;
import model.dao.TicketTypeDao;
import model.to.SaleDetailsTo;
import model.to.TicketSaleTo;
import model.to.TicketTypeTo;

/**
 *
 * @author sushant saini
 */
public class MovieForBooking extends javax.swing.JInternalFrame {

    private List<MovieTimingTo> movies;
    String screenname;
    String moviename;
    MovieTimingTo mt;
    TicketTypeTo tt;
    List<JCheckBox> checks;
    List<ScreenTicketsTo> st;

    private JPopupMenu popup;
    private int movieid;

    /**
     * Creates new form ViewMovieDetails
     */
    public MovieForBooking() {
        initComponents();
        bindTableMovie();
        jcbchooseticket.setVisible(false);
        cdpshowdate.setVisible(false);
        date.setVisible(false);
        panelticket.setVisible(false);
        btnoperation.setVisible(false);
        lblticket.setVisible(false);
    }

    public void bindTicketCombo() {
        jcbchooseticket.removeAllItems();
        st = new ScreenTicketsDao().getAllticktes(screenname);
        jcbchooseticket.addItem("Choose Ticket");
        for (ScreenTicketsTo ticket : st) {
            jcbchooseticket.addItem(ticket.getTypename());
        }
    }
  
    public void bindTableMovie() {
        String[] col_names = {"Movie Name", "Screen Name", "Start time", "End time", "Movie Photo"};
        Object[][] records = null;
        movies = new MovieTimingDao().getActiveMovies();
        if (movies != null && movies.size() > 0) {
            records = new Object[movies.size()][col_names.length];
            int index = 0;
            for (MovieTimingTo sc : movies) {

                ImageIcon icon = new ImageIcon(getClass().getResource("/icons/nopics.png"));
                try {
                    BufferedImage img;
                    img = ImageIO.read(sc.getMoviephoto());
                    Image dimg = img.getScaledInstance(50, 50, Image.SCALE_SMOOTH);
                    icon = new ImageIcon(dimg);
                } catch (Exception ex) {
                    ErrorHandler.showStackTrace(ex);
                }

                records[index] = new Object[]{sc.getMoviename(), sc.getScreenname(), sc.getStarttime(), sc.getEndtime(), icon};
                index++;
            }
        } else {
            records = new Object[1][col_names.length];
            records[0] = new Object[]{"No Information", "No Information", "No Information", "No Information", "No Information"};
        }
        DefaultTableModel model = new DefaultTableModel(records, col_names) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 4) {
                    return ImageIcon.class;
                }
                return super.getColumnClass(columnIndex);
            }

        };
        tablemovie.getTableHeader().setReorderingAllowed(false);
        tablemovie.setAutoCreateRowSorter(true);
        tablemovie.setRowHeight(70);
        tablemovie.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablemovie = new javax.swing.JTable();
        jcbchooseticket = new javax.swing.JComboBox<>();
        date = new javax.swing.JLabel();
        cdpshowdate = new controls.ShowDatePanel();
        panelticket = new javax.swing.JPanel();
        btnoperation = new javax.swing.JButton();
        lblticket = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Active Movies");

        tablemovie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablemovie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablemovieMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablemovie);

        jcbchooseticket.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jcbchooseticket.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbchooseticket.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbchooseticketItemStateChanged(evt);
            }
        });

        date.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        date.setText("CHOOSE SHOW DATE:");

        panelticket.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelticketLayout = new javax.swing.GroupLayout(panelticket);
        panelticket.setLayout(panelticketLayout);
        panelticketLayout.setHorizontalGroup(
            panelticketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );
        panelticketLayout.setVerticalGroup(
            panelticketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        btnoperation.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnoperation.setText("BOOK TICKET");
        btnoperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnoperationActionPerformed(evt);
            }
        });

        lblticket.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblticket.setText("CHOOSE TICKET:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblticket)
                            .addComponent(date))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbchooseticket, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cdpshowdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(btnoperation, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelticket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(btnoperation, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(date)
                            .addComponent(cdpshowdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblticket)
                            .addComponent(jcbchooseticket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelticket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablemovieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablemovieMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isLeftMouseButton(evt)) {
            try {
                int row = tablemovie.getSelectedRow();
                String table_click = (tablemovie.getModel().getValueAt(row, 1).toString());
                 moviename = (tablemovie.getModel().getValueAt(row, 0).toString());
                screenname = table_click;
                mt = new MovieTimingDao().getmtid(screenname, moviename);

               jcbchooseticket.setVisible(false);
                bindTicketCombo();
                Thread.sleep(500);
                jcbchooseticket.setVisible(true);
                date.setVisible(true);
                cdpshowdate.setVisible(true);
    
               lblticket.setVisible(true);
                
            } catch (Exception ex) {
            }
    }//GEN-LAST:event_tablemovieMouseClicked
    }
    private void btnoperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnoperationActionPerformed
        // TODO add your handling code here:
        try {
            boolean allvalid = true;

            String message = "";
            boolean seatselected = false;
            List<String> seatno = new ArrayList<>();
            int totalseat = 0;
            String ticket = jcbchooseticket.getSelectedItem().toString();
            Date showdate = cdpshowdate.getSelectedDate();
            tt = new TicketTypeDao().getprice(ticket);
          
          
            if (jcbchooseticket.getSelectedIndex() < 1) {
                allvalid = false;
                message = "PLEASE CHOOSE TICKET";
            }
            if (showdate == null) {
                message = "PLEASE CHOOSE ANY SHOW DATE";
                allvalid = false;
            }
            for (JCheckBox checkbox : checks) {
                if (checkbox.isSelected()) {
                    seatselected = true;
                    totalseat++;
                    seatno.add(checkbox.getText());
                }
            }
            if (seatselected == false) {
                message = "PLEASE CHOOSE SEAT";
                allvalid = false;
            }
            if (allvalid) {
                TicketSaleTo record = new TicketSaleTo();
                record.setTotalseat(totalseat);
                record.setBookdate(new Date(System.currentTimeMillis()));
                record.setShowdate(showdate);
                record.setMtid(mt.getMtid());
                TicketSaleDao action = new TicketSaleDao();
                if (action.insertRecord(record)) {
                    message = "TICKET BOOKED";
                    int saleid = new CommonDAO().getLastInsertID();
                    if(saleid!=0){
                        SaleDetailsDao sdd = new SaleDetailsDao();
                        for(String seatid : seatno){
                            SaleDetailsTo sdt = new SaleDetailsTo();
                            sdt.setSeatno(seatid);
                            sdt.setSaleid(saleid);
                            sdt.setPrice(tt.getPrice());
                            sdt.setTypeid(tt.getTypeid());
                            sdd.insertRecord(sdt);
                        }
                    }
                } else {
                    message = "Failure due to " + action.getError_message();
                }

            }
            JOptionPane.showMessageDialog(this, message);
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_btnoperationActionPerformed

    private void jcbchooseticketItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbchooseticketItemStateChanged

        panelticket.removeAll();
        if (jcbchooseticket.getSelectedIndex() > 0) {
            String ticket = jcbchooseticket.getSelectedItem().toString();
            ScreenTicketsTo st = new ScreenTicketsDao().getRecord(ticket, screenname);
            GridLayout layout = new GridLayout(st.getTotalrow(), st.getSeatinrow(), 5, 5);
            Date showdate=cdpshowdate.getSelectedDate();
               int mtid=mt.getMtid();
               tt = new TicketTypeDao().getprice(ticket);
               
           List<SaleDetailsTo> booked=new SaleDetailsDao().getBooked(showdate,mtid,tt.getTypeid());
            List<String> book=new ArrayList<>();
            if(booked!=null){
            for(SaleDetailsTo bb:booked){
                book.add(bb.getSeatno());
            }}
            panelticket.setLayout(layout);
            panelticket.repaint();
            panelticket.revalidate();
            checks = new ArrayList<>();
            char symbol = 'A';
            for (int row = 1; row <= st.getTotalrow(); row++) {
                for (int col = 1; col <= st.getSeatinrow(); col++) {
                    JCheckBox jcb = new JCheckBox(symbol + "" + col);
                    panelticket.add(jcb);
                    checks.add(jcb);
                }
                symbol++;
            }
            if(booked!=null){
            for (JCheckBox checkbox : checks) {
                for(String bk:book){
                if(checkbox.getText().equals(bk)){
                    checkbox.setEnabled(false);
                }}
                }
            }
            
            panelticket.setVisible(true);
            btnoperation.setVisible(true);
        } else {
            panelticket.setVisible(false);
            btnoperation.setVisible(false);
        }
    }//GEN-LAST:event_jcbchooseticketItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnoperation;
    private controls.ShowDatePanel cdpshowdate;
    private javax.swing.JLabel date;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbchooseticket;
    private javax.swing.JLabel lblticket;
    private javax.swing.JPanel panelticket;
    private javax.swing.JTable tablemovie;
    // End of variables declaration//GEN-END:variables
}
