/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin_screen;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.dao.MovieTimingDao;
import model.dao.ScreenTicketsDao;
import model.to.MovieInfoTo;
import model.to.MovieTimingTo;
import model.to.ScreenTicketsTo;
import utility.Operation;

/**
 *
 * @author sushant saini
 */
public class ViewMovieTimings extends javax.swing.JInternalFrame {

    private List<MovieTimingTo> movietimings;
    private JPopupMenu popup;
    private int mtid;

    /**
     * Creates new form ViewMovieTimings
     */
    public ViewMovieTimings() {
        initComponents();
        bindTableMovieTimings();
        preparePopupMenu();
    }

    public void preparePopupMenu() {
        popup = new JPopupMenu();
        Font font = new Font("Consolas", Font.BOLD, 18);
        JMenuItem delete_item = new JMenuItem("Delete");
        JMenuItem edit_item = new JMenuItem("Edit");
        ImageIcon delete_icon = new ImageIcon(getClass().getResource("/icons/delete.png"));
        ImageIcon edit_icon = new ImageIcon(getClass().getResource("/icons/edit_1.png"));
        delete_item.setFont(font);
        edit_item.setFont(font);
        delete_item.setIcon(delete_icon);
        edit_item.setIcon(edit_icon);
        popup.add(delete_item);
        popup.add(edit_item);
        delete_item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                delete_movietimings();
            }
        });
        edit_item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                edit_movietimings();
            }
        });
    }

    public void delete_movietimings() {
        if (mtid != 0) {
            int result = JOptionPane.showConfirmDialog(this, "Do You Want To Delete?", "Suggestions", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                MovieTimingDao action = new MovieTimingDao();
                String message = "";
                if (action.deleteRecord(mtid)) {
                    message = "Record is Removed From System";
                    bindTableMovieTimings();
                } else {
                    message = "Failure Due to " + action.getError_message();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        mtid = 0;
    }

    public void edit_movietimings() {
        if (mtid != 0) {
            AddNewMovieTimings ansc = new AddNewMovieTimings(mtid);
            Operation.openInternalFrame(getDesktopPane(), ansc);
            dispose();
        }
    }

    public void bindTableMovieTimings() {
        String[] col_names = {"MTID", "Movie Name", "Screen Name", "Start Time", "End Time", "Active Status"};
        Object[][] records = null;

        movietimings = new MovieTimingDao().getAllRecord();
        if (movietimings != null && movietimings.size() > 0) {
            records = new Object[movietimings.size()][col_names.length];
            int index = 0;
            for (MovieTimingTo sc : movietimings) {
                records[index] = new Object[]{sc.getMtid(), sc.getMoviename(), sc.getScreenname(), sc.getStarttime(), sc.getEndtime(), sc.getIsactive()};
                index++;
            }
        } else {
            records = new Object[1][col_names.length];
            records[0] = new Object[]{"No Information", "No Information", "No Information", "No Information", "No Information", "No Information"};
        }
        DefaultTableModel model = new DefaultTableModel(records, col_names) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        tablemovietimings.getTableHeader().setReorderingAllowed(false);
        tablemovietimings.setAutoCreateRowSorter(true);
        tablemovietimings.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablemovietimings = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);

        tablemovietimings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablemovietimings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablemovietimingsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablemovietimings);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablemovietimingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablemovietimingsMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row_point = tablemovietimings.rowAtPoint(evt.getPoint());
            tablemovietimings.getSelectionModel().setSelectionInterval(row_point, row_point);
            popup.show(tablemovietimings, evt.getX(), evt.getY());
            int selected_row = tablemovietimings.getSelectedRow();
            mtid = Integer.parseInt(tablemovietimings.getValueAt(selected_row, 0).toString());

        }
    }//GEN-LAST:event_tablemovietimingsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablemovietimings;
    // End of variables declaration//GEN-END:variables
}
