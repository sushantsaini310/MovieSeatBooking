/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin_screen;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.dao.ScreenInfoDao;
import model.dao.ScreenTicketsDao;
import model.to.ScreenInfoTo;
import model.to.ScreenTicketsTo;
import model.to.TicketTypeTo;
import utility.Operation;

/**
 *
 * @author sushant saini
 */
public class ViewScreenTicketsDetails extends javax.swing.JInternalFrame {
private List<ScreenTicketsTo> screentickets;
private JPopupMenu popup;
    private int stid;
    /**
     * Creates new form ViewScreenTicketsDetails
     */
    public ViewScreenTicketsDetails() {
        initComponents();
        bindTableScreenTickets();
        preparePopupMenu();
    }
     public void preparePopupMenu() {
        popup = new JPopupMenu();
        Font font = new Font("Consolas", Font.BOLD, 18);
        JMenuItem delete_item = new JMenuItem("Delete");
        JMenuItem edit_item = new JMenuItem("Edit");
        ImageIcon delete_icon = new ImageIcon(getClass().getResource("/icons/delete.png"));
        ImageIcon edit_icon = new ImageIcon(getClass().getResource("/icons/edit_1.png"));
        delete_item.setFont(font);
        edit_item.setFont(font);
        delete_item.setIcon(delete_icon);
        edit_item.setIcon(edit_icon);
        popup.add(delete_item);
        popup.add(edit_item);
        delete_item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                delete_screentickets();
            }
        });
        edit_item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                edit_screentickets();
            }
        });
    }

    public void delete_screentickets() {
        if(stid!=0){
            int result = JOptionPane.showConfirmDialog(this, "Do You Want To Delete?", "Suggestions", JOptionPane.YES_NO_OPTION);
            if(result == JOptionPane.YES_OPTION){
                ScreenTicketsDao action = new ScreenTicketsDao();
                String message = "";
                if(action.deleteRecord(stid)){
                    message = "Record is Removed From System";
                    bindTableScreenTickets();
                }else{
                    message = "Failure Due to " + action.getError_message();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        stid = 0;
    }

    public void edit_screentickets() {
        if(stid!=0){
            AddNewScreenTickets ansc = new AddNewScreenTickets(stid);
            Operation.openInternalFrame(getDesktopPane(), ansc);
            dispose();
        }
    }
public void bindTableScreenTickets(){
        String[] col_names={"STID","Screen Name","Ticket Type","Total Rows","Seat In Row"};
        Object[][]  records=null;
        screentickets=new ScreenTicketsDao().getAllRecord();
        if(screentickets!=null&&screentickets.size()>0){
            records=new Object[screentickets.size()][col_names.length];
            int index=0;    
            for(ScreenTicketsTo sc:screentickets){
            records[index]=new  Object[]{sc.getStid(),sc.getScreenname(),sc.getTypename(),sc.getTotalrow(),sc.getSeatinrow()};
            index++;}
        }else{
            records=new Object[1][col_names.length];
            records[0]=new  Object[]{"No Information","No Information","No Information","No Information","No Information"};
        }
        DefaultTableModel model=new DefaultTableModel(records, col_names){
            @Override
            public boolean isCellEditable(int row, int column) {
            return false;
            }
            
        };
        tablescreentickets.getTableHeader().setReorderingAllowed(false);
        tablescreentickets.setAutoCreateRowSorter(true);
         tablescreentickets.setModel(model);
         
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablescreentickets = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Screen Tickets Details");

        tablescreentickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablescreentickets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablescreenticketsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablescreentickets);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablescreenticketsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablescreenticketsMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row_point = tablescreentickets.rowAtPoint(evt.getPoint());
            tablescreentickets.getSelectionModel().setSelectionInterval(row_point, row_point);
            popup.show(tablescreentickets, evt.getX(), evt.getY());
            int selected_row = tablescreentickets.getSelectedRow();
           stid = Integer.parseInt(tablescreentickets.getValueAt(selected_row, 0).toString());
            //System.out.println(subcategoryid);
        }
    }//GEN-LAST:event_tablescreenticketsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablescreentickets;
    // End of variables declaration//GEN-END:variables
}
