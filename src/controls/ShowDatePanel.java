/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controls;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import utility.ErrorHandler;

/**
 *
 * @author sushant saini
 */
public class ShowDatePanel extends javax.swing.JPanel {
private GregorianCalendar gcal;
    /**
     * Creates new form CurrentDatePanel
     */
    public ShowDatePanel() {
        initComponents();
        jcbyear.removeAllItems();
        jcbyear.addItem("YEAR");
        gcal=new GregorianCalendar();
        int current_year=gcal.get(Calendar.YEAR);
        for(int year=current_year;year>=current_year-1;year--)
            jcbyear.addItem(year);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbmonth = new javax.swing.JComboBox<>();
        jcbdate = new javax.swing.JComboBox<>();
        jcbyear = new javax.swing.JComboBox<>();

        jcbmonth.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jcbmonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbmonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmonthItemStateChanged(evt);
            }
        });

        jcbdate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jcbdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcbyear.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jcbyear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbyear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbyearItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jcbyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jcbyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbmonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jcbdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbyearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbyearItemStateChanged
        // TODO add your handling code here:
        int selected_date_index=jcbdate.getSelectedIndex();
        int selected_month_index=jcbmonth.getSelectedIndex();
         jcbmonth.removeAllItems();
        jcbmonth.addItem("MONTH");
        if(jcbyear.getSelectedIndex()>0){
            int selected_year=Integer.parseInt(jcbyear.getSelectedItem().toString());
            int current_year=gcal.get(Calendar.YEAR);
            Months[] months=Months.values();
            int i=0;
            int j=months.length-1;
            if(selected_year==current_year){
                j=gcal.get(Calendar.MONTH);
            }
            for(int ind=i;ind<=j;ind++){
                jcbmonth.addItem(months[ind]);
            }
            if(selected_month_index<jcbmonth.getItemCount())
            {
                jcbmonth.setSelectedIndex(selected_month_index);
            }
             if(selected_date_index<jcbdate.getItemCount())
            {
                jcbdate.setSelectedIndex(selected_date_index);
            }
        }
    }//GEN-LAST:event_jcbyearItemStateChanged

    private void jcbmonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmonthItemStateChanged
        // TODO add your handling code here:
          int selected_date_index=jcbdate.getSelectedIndex();
         jcbdate.removeAllItems();
        jcbdate.addItem("DATE");
          if(jcbmonth.getSelectedIndex()>0){
                int selected_year=Integer.parseInt(jcbyear.getSelectedItem().toString());
            int current_year=gcal.get(Calendar.YEAR);
            int current_month=gcal.get(Calendar.MONTH);
            Months selected_month=(Months) jcbmonth.getSelectedItem();
            int i=1;
            int j=selected_month.getDays();
            //if(selected_year==current_year && current_month==selected_month.ordinal()){
                //j=gcal.get(Calendar.DATE);
             if(selected_month==Months.February){
                j=gcal.isLeapYear(selected_year) ?29:28;
            }
            for(int date=i;date<=j;date++){
                jcbdate.addItem(date);
            }
              if(selected_date_index<jcbdate.getItemCount())
            {
                jcbdate.setSelectedIndex(selected_date_index);
            }
          }
    }//GEN-LAST:event_jcbmonthItemStateChanged
 public Date getSelectedDate(){
        Date selected_date = null;
        try{
            if(jcbyear.getSelectedIndex() > 0 && jcbmonth.getSelectedIndex() > 0 && jcbdate.getSelectedIndex()>0){
                int year = Integer.parseInt(jcbyear.getSelectedItem().toString());
                int month = jcbmonth.getSelectedIndex();
                int date = jcbdate.getSelectedIndex();
                String date_string = year + "-" + month + "-" + date;
                selected_date = Date.valueOf(date_string);
            }
        }catch(Exception ex){
            ErrorHandler.showStackTrace(ex);
        }
        return selected_date;
    }
 public void setDate(Date date_value){
        try{
            String[] values = date_value.toString().split("-");
            int year = Integer.parseInt(values[0]);
            int month = Integer.parseInt(values[1]);
            int date = Integer.parseInt(values[2]);
            for(int index = 1; index < jcbyear.getItemCount(); index++){
                int year_value = Integer.parseInt(jcbyear.getItemAt(index).toString());
                if(year == year_value){
                    jcbyear.setSelectedIndex(index);
                    break;
                }
            }
            jcbmonth.setSelectedIndex(month);
            jcbdate.setSelectedIndex(date);
        }catch(Exception ex){
            ErrorHandler.showStackTrace(ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> jcbdate;
    private javax.swing.JComboBox<Object> jcbmonth;
    private javax.swing.JComboBox<Object> jcbyear;
    // End of variables declaration//GEN-END:variables
}
